{"version":3,"file":"ExpoKeepAwake.web.js","sourceRoot":"","sources":["../src/ExpoKeepAwake.web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAE9C,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAE3D,MAAM,WAAW,GAAwB,EAAE,CAAC;AAC5C,eAAe;IACb,KAAK,CAAC,gBAAgB;QACpB,OAAO,UAAU,IAAI,SAAS,CAAC;IACjC,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,GAAW;QACxB,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;YACpB,MAAM,IAAI,UAAU,CAClB,4BAA4B,EAC5B,0BAA0B,GAAG,wBAAwB,CACtD,CAAC;SACH;QAED,MAAM,QAAQ,GAAG,MAAO,SAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrE,WAAW,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;IAC9B,CAAC;IACD,KAAK,CAAC,UAAU,CAAC,GAAW;QAC1B,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;YACpB,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;YAC3B,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;SACzB;aAAM;YACL,MAAM,IAAI,UAAU,CAClB,4BAA4B,EAC5B,0BAA0B,GAAG,wBAAwB,CACtD,CAAC;SACH;IACH,CAAC;IACD,WAAW,CAAC,GAAW,EAAE,QAAiD;QACxE,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;YACpB,WAAW,CAAC,GAAG,CAAC,CAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE;gBAChD,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;CACF,CAAC","sourcesContent":["import { CodedError } from '@unimodules/core';\n\nimport { KeepAwakeEventType } from './ExpoKeepAwake.types';\n\nconst wakeLockMap: Record<string, any> = {};\nexport default {\n  async isAvailableAsync() {\n    return 'wakeLock' in navigator;\n  },\n  async activate(tag: string) {\n    if (wakeLockMap[tag]) {\n      throw new CodedError(\n        'ERR_KEEP_AWAKE_TAG_INVALID',\n        `The wake lock with tag ${tag} has not activated yet`\n      );\n    }\n\n    const wakeLock = await (navigator as any).wakeLock.request('screen');\n    wakeLockMap[tag] = wakeLock;\n  },\n  async deactivate(tag: string) {\n    if (wakeLockMap[tag]) {\n      wakeLockMap[tag].release();\n      wakeLockMap[tag] = null;\n    } else {\n      throw new CodedError(\n        'ERR_KEEP_AWAKE_TAG_INVALID',\n        `The wake lock with tag ${tag} has not activated yet`\n      );\n    }\n  },\n  addListener(tag: string, listener: (eventType: KeepAwakeEventType) => void) {\n    if (wakeLockMap[tag]) {\n      wakeLockMap[tag].addEventListener('release', () => {\n        listener(KeepAwakeEventType.RELEASE);\n      });\n    }\n  },\n};\n"]}